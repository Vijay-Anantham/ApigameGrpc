// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protofiles/game.proto

package game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RollerClient is the client API for Roller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RollerClient interface {
	// Sends a greeting
	MakeRoll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollReply, error)
}

type rollerClient struct {
	cc grpc.ClientConnInterface
}

func NewRollerClient(cc grpc.ClientConnInterface) RollerClient {
	return &rollerClient{cc}
}

func (c *rollerClient) MakeRoll(ctx context.Context, in *RollRequest, opts ...grpc.CallOption) (*RollReply, error) {
	out := new(RollReply)
	err := c.cc.Invoke(ctx, "/game.Roller/MakeRoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RollerServer is the server API for Roller service.
// All implementations must embed UnimplementedRollerServer
// for forward compatibility
type RollerServer interface {
	// Sends a greeting
	MakeRoll(context.Context, *RollRequest) (*RollReply, error)
	mustEmbedUnimplementedRollerServer()
}

// UnimplementedRollerServer must be embedded to have forward compatible implementations.
type UnimplementedRollerServer struct {
}

func (UnimplementedRollerServer) MakeRoll(context.Context, *RollRequest) (*RollReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeRoll not implemented")
}
func (UnimplementedRollerServer) mustEmbedUnimplementedRollerServer() {}

// UnsafeRollerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RollerServer will
// result in compilation errors.
type UnsafeRollerServer interface {
	mustEmbedUnimplementedRollerServer()
}

func RegisterRollerServer(s grpc.ServiceRegistrar, srv RollerServer) {
	s.RegisterService(&Roller_ServiceDesc, srv)
}

func _Roller_MakeRoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RollerServer).MakeRoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game.Roller/MakeRoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RollerServer).MakeRoll(ctx, req.(*RollRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Roller_ServiceDesc is the grpc.ServiceDesc for Roller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Roller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.Roller",
	HandlerType: (*RollerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeRoll",
			Handler:    _Roller_MakeRoll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protofiles/game.proto",
}

// UpdateScoreClient is the client API for UpdateScore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateScoreClient interface {
	UpdateDashboardScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (UpdateScore_UpdateDashboardScoreClient, error)
}

type updateScoreClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateScoreClient(cc grpc.ClientConnInterface) UpdateScoreClient {
	return &updateScoreClient{cc}
}

func (c *updateScoreClient) UpdateDashboardScore(ctx context.Context, in *ScoreRequest, opts ...grpc.CallOption) (UpdateScore_UpdateDashboardScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpdateScore_ServiceDesc.Streams[0], "/game.UpdateScore/UpdateDashboardScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &updateScoreUpdateDashboardScoreClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UpdateScore_UpdateDashboardScoreClient interface {
	Recv() (*ScoreReply, error)
	grpc.ClientStream
}

type updateScoreUpdateDashboardScoreClient struct {
	grpc.ClientStream
}

func (x *updateScoreUpdateDashboardScoreClient) Recv() (*ScoreReply, error) {
	m := new(ScoreReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpdateScoreServer is the server API for UpdateScore service.
// All implementations must embed UnimplementedUpdateScoreServer
// for forward compatibility
type UpdateScoreServer interface {
	UpdateDashboardScore(*ScoreRequest, UpdateScore_UpdateDashboardScoreServer) error
	mustEmbedUnimplementedUpdateScoreServer()
}

// UnimplementedUpdateScoreServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateScoreServer struct {
}

func (UnimplementedUpdateScoreServer) UpdateDashboardScore(*ScoreRequest, UpdateScore_UpdateDashboardScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateDashboardScore not implemented")
}
func (UnimplementedUpdateScoreServer) mustEmbedUnimplementedUpdateScoreServer() {}

// UnsafeUpdateScoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateScoreServer will
// result in compilation errors.
type UnsafeUpdateScoreServer interface {
	mustEmbedUnimplementedUpdateScoreServer()
}

func RegisterUpdateScoreServer(s grpc.ServiceRegistrar, srv UpdateScoreServer) {
	s.RegisterService(&UpdateScore_ServiceDesc, srv)
}

func _UpdateScore_UpdateDashboardScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScoreRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UpdateScoreServer).UpdateDashboardScore(m, &updateScoreUpdateDashboardScoreServer{stream})
}

type UpdateScore_UpdateDashboardScoreServer interface {
	Send(*ScoreReply) error
	grpc.ServerStream
}

type updateScoreUpdateDashboardScoreServer struct {
	grpc.ServerStream
}

func (x *updateScoreUpdateDashboardScoreServer) Send(m *ScoreReply) error {
	return x.ServerStream.SendMsg(m)
}

// UpdateScore_ServiceDesc is the grpc.ServiceDesc for UpdateScore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateScore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game.UpdateScore",
	HandlerType: (*UpdateScoreServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpdateDashboardScore",
			Handler:       _UpdateScore_UpdateDashboardScore_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protofiles/game.proto",
}
